#! /usr/bin/python

# import client
import os
import sys
sys.path.insert(0, os.path.join(os.path.dirname(os.path.realpath(sys.argv[0])), '..'))
from sdcclient import SdcClient

# Input Sysdig API token
sdc_token = os.environ['SYSDIG_API_TOKEN']

# Instantiate the Sysdig client

sdclient = SdcClient(sdc_token)


{% for team_name in team %}
{% set team_members = {} %}
{% set namespaces = {} %}

#### TEAM CREATION {{team_name.name}} ####
{#{% for namespace in team_name.namespaces %}
{% set namespace2 = namespace.update({{ namespace.name }}) %}
{% endfor%}}#}
print('Now trying to create a team with name:', '{{team_name.name}}')
ok, res = sdclient.create_team( '{{team_name.name}}', filter="kubernetes.namespace.name='devops-wekan'", show="container" )
if not ok:
    print('Team creation failed:', res, '. Exiting.')
else:
    print('Team creation succeeded.', res)



#### USER INVITES {{team_name.name}} ####
{% for member in team_name.members %}
print('Trying to invite a user:', '{{member.name}}')
ok, res = sdclient.create_user_invite('{{member.name}}')
if not ok:
    if res == 'user ' + '{{member.name}}' + ' already exists':
        print('User creation failed because', '{{member.name}}', 'already exists. Continuing.')
    else:
        print('User creation failed:', res, '. Exiting.')
else:
    print('User creation succeeded')
{% set team_members2 = team_members.update({ member.name :'ROLE_TEAM_READ'}) %}
{% endfor %}

#### EDIT TEAM {{team_name.name}} #####
print('Now trying to edit team:', '{{team_name.name}}')
# memberships = {
#     'admin@draios.com': 'ROLE_TEAM_MANAGER',
#     'john-doe@sysdig.com': 'ROLE_TEAM_READ'
# }
memberships={{ team_members }}
ok, res = sdclient.edit_team('{{team_name.name}}', memberships=memberships)
if not ok:
    print('Could not edit team:', res, '. Exiting.')
else:
    print('Edited team to change description and add users')


#### DASHBOARD CREATION ####
{% for dashboard in team_name.dashboards %}
dashboardSource = "{{ dashboard.name }}"
dashboardName = "{{team_name.name}}-" + dashboardSource


print('Creating dashboard from dashboard')
ok, res = sdclient.create_dashboard_from_view(dashboardName, dashboardSource, None, True)

#
# Check the result
#
if ok:
    print('Dashboard copied successfully')
else:
    print(res)
{% endfor %}
{% endfor %}